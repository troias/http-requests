{"ast":null,"code":"var _jsxFileName = \"/home/troias/udemy/project-4/01-starting-project/src/App.js\";\nimport React, { useEffect, useState, useCallback } from 'react';\nimport AddMovie from './components/AddMovie';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const fetchMovieshandler = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const req = await fetch('https://react-http-6bc54-default-rtdb.firebaseio.com/movies.json');\n\n      if (!req.ok) {\n        throw new Error('Something went wrong');\n      }\n\n      const response = await req.json();\n      console.log(response);\n      const loadedMovies = [];\n\n      for (const key in response) {\n        loadedMovies.push({\n          id: key,\n          title: response[key].title,\n          openingText: response[key].openingText,\n          releaseDate: response[key].releaseDate\n        });\n      }\n\n      setMovies(loadedMovies);\n      setLoading(false);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMovieshandler();\n  }, [fetchMovieshandler]);\n\n  const addMovieHandler = async movie => {\n    const req = await fetch(\"https://react-http-6bc54-default-rtdb.firebaseio.com/movies.json\", {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const res = await req.json;\n    console.log(res);\n  };\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, \" found no movies \");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }, \" \", error, \" \");\n  }\n\n  if (loading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }\n    }, \" loading \");\n  }\n\n  const fetchStarWarsMoviesHandler = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n    } catch (error) {}\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMovieshandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMovieshandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, \"Fetch Starwars movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/troias/udemy/project-4/01-starting-project/src/App.js"],"names":["React","useEffect","useState","useCallback","AddMovie","MoviesList","App","movies","setMovies","loading","setLoading","error","setError","fetchMovieshandler","req","fetch","ok","Error","response","json","console","log","loadedMovies","key","push","id","title","openingText","releaseDate","message","addMovieHandler","movie","method","body","JSON","stringify","headers","res","content","length","fetchStarWarsMoviesHandler","setIsLoading"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useCallback} from 'react';\nimport AddMovie from './components/AddMovie';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\n\nfunction App() {\n\n  const [movies, setMovies] = useState([])\n  const [loading, setLoading]= useState(false)\n  const [ error, setError] = useState(\"\")\n\n  const fetchMovieshandler = useCallback(async () => {\n    setLoading(true)\n    setError(null)\n    \n    try {\n      const req = await fetch('https://react-http-6bc54-default-rtdb.firebaseio.com/movies.json')\n      if (!req.ok) {\n        throw new Error('Something went wrong')\n      }\n      const response = await req.json()\n      console.log(response)\n\n      const loadedMovies = []\n      for (const key in response) {\n        loadedMovies.push({ \n          id: key,\n          title: response[key].title, \n          openingText: response[key].openingText, \n          releaseDate: response[key].releaseDate, \n        })\n      }\n        setMovies(loadedMovies)\n        setLoading(false)\n    } catch(error) {\n      setError(error.message)\n    \n    }\n    setLoading(false)\n  }, [])\n\n  useEffect(() =>{\n    fetchMovieshandler()\n  }, [fetchMovieshandler])\n\n  const addMovieHandler = async (movie)  => {\n    const req = await fetch(\"https://react-http-6bc54-default-rtdb.firebaseio.com/movies.json\", { \n      method: 'POST',\n      body: JSON.stringify(movie), \n      headers: {'Content-Type': 'application/json'}\n    })\n    \n    const res = await req.json\n    console.log(res);\n  }\n\n  let content = <p> found no movies </p>\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />\n  }\n  \n  if (error) {\n    content = <p> {error} </p>\n  }\n  \n  if (loading) {\n    content = <p> loading </p>\n  }\n\n  const fetchStarWarsMoviesHandler = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n    } catch (error) {\n      \n    }\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n      <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMovieshandler}>Fetch Movies</button>\n      </section>\n      <section>\n        <button onClick={fetchMovieshandler}>Fetch Starwars movies</button>\n      </section>\n      <section>\n    {content}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}